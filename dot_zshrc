# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
if [[ -n "${ZELLIJ}" ]]; then
export TMUX=$ZELLIJ
fi

if [[ -n "${ZELLIJ}" ]]; then
  unset TMUX
fi

# check if we did a :term command in neovim
is_nvim_term() {
    parent_process=$(ps -o comm= -p $PPID)
    if [[ $parent_process == *"nvim"* ]]; then
        return 0  # Return success (true)
    else
        return 1  # Return failure (false)
    fi
}
# setup term before loading tmux
# for undercurls
export TERM="xterm-256color"
[[ -n $TMUX ]] && export TERM="tmux-256color"
update_terminfo () {
    local x ncdir terms
    ncdir="/opt/homebrew/opt/ncurses"
    terms=(alacritty-direct alacritty tmux tmux-256color)

    mkdir -p ~/.terminfo && cd ~/.terminfo

    if [ -d $ncdir ] ; then
        echo "ncurses detected"
        # sed : fix color for htop
        for x in $terms ; do
            $ncdir/bin/infocmp -x -A $ncdir/share/terminfo $x > ${x}.src &&
            sed -i '' 's|pairs#0x10000|pairs#32767|' ${x}.src &&
            /usr/bin/tic -x ${x}.src &&
            rm -f ${x}.src
        done
    else
        local url
        url="https://invisible-island.net/datafiles/current/terminfo.src.gz"
        if curl -sfLO $url ; then
            gunzip -f terminfo.src.gz &&
            sed -i '' 's|pairs#0x10000|pairs#32767|' terminfo.src &&
            /usr/bin/tic -xe ${(j:,:)terms} terminfo.src &&
            rm -f terminfo.src
        else
            echo "unable to download $url"
        fi
    fi
    cd - > /dev/null
}
# Always work in a tmux session if tmux is installed
# https://github.com/chrishunt/dot-files/blob/master/.zshrc
# https://gist.github.com/chakrit/5004006
if [ $TERM != "tmux-256color" ] && [ $TERM != "tmux" ]; then
    if which tmux 2>&1 >/dev/null; then
        # if we're not in :term and toggleterm, create a main session
        if [ ! $is_nvim_term ] && [ -z "$TOGGLETERM_ID" ] ; then 
            export TERM="tmux-256color"
            tmux new-session -t main \; set-option destroy-unattached || tmux new-session -s main
            exit
        # else create a session using the set TOGGLETERM_ID, usually we use the cwd of the project as the id
        elif [ -n "$TOGGLETERM_ID" ] && [ "$TOGGLETERM_ID" != "no-session" ]; then
                tmux new-session -t $TOGGLETERM_ID \; set-option destroy-unattached || tmux new-session -s $TOGGLETERM_ID
                exit
        fi
    fi
fi

#NVM setup  
# CLI stuff I've installed
# bat
# btop
# dust
# exa
# fd
# fzf
# jq
# ncdu
# neoftech
# nvm
# prettyping
# ranger
# tokei
# w3m
# jqp
# duf
# xh
# dog
# fd
# ripgrep
# lazygit
# lazydocker
# rip(rm-imrpvoed)
# git checkout with fzf: https://medium.com/@mrWinston/smarter-git-checkout-using-fzf-to-supercharge-your-commandline-7507db600996
gcha() {
  git checkout "$(git branch --all | fzf | tr -d '[:space:]')"
}
gch() {
  git checkout "$(git branch | fzf | tr -d '[:space:]')"
}

# vi mode
# bindkey -v
# export KEYTIMEOUT=1

# gcloud setup
source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"

HISTSIZE=10000
HISTFILESIZE=20000
eval "$(mcfly init zsh)"
eval $(thefuck --alias pota)
# fix jupyter PATH issue with monterey
export JUPYTER_PATH=/opt/homebrew/share/jupyter:$JUPYTER_PATH



# zsh autosuggestion
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=8,underline"
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
# source /opt/homebrew/share/zsh-autocomplete/zsh-autocomplete.plugin.zsh

# Fix starship load wrapping issue
export LC_ALL=en_US.UTF-8

# zsh-you-should-use settings: https://github.com/MichaelAquilina/zsh-you-should-use
export YSU_MESSAGE_POSITION="after"

export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
 # [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# set java jdk to homebrew installation
export JAVA_HOME=/opt/homebrew/opt/openjdk/

# starship steup
eval "$(starship init zsh)"

# colors
export CLICOLOR=1

# compdef init
autoload -Uz compinit
compinit

test -f .work-zshrc && source .work-zshrc # 2> /dev/null
# detailas ls
alias ll="exa -lah"
alias ls="exa"

# pretty ping
alias pping="prettyping --nolegend"

# lazygit
export XDG_CONFIG_HOME="$HOME/.config"
alias gg="lazygit"

# edit this .zshrc file
alias zshconfig="nvim ~/.zshrc"

# open ~/.config/nvimo
alias nconfig="(cd ~/.config/nvim; nvim)"

# configure tmux
alias tmuxconfig="nvim ~/.tmux.conf"

# reload this zshfile
alias zshreload="source ~/.zshrc"

# fzf setup
alias fhistory="history | fzf"
alias preview="fzf --preview 'bat --color \"always\" {}'"
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"

# set ctype locale to C
export LC_CTYPE="C"

function jsonbat (){
  cat $1 |  json_pp | bat -l json; 
}

# function f12 {
#     print -n "\e[[24"
#
# }
# zle -N f12
# fix to iterm nav hotkeys
bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word
# bindkey "^[[24;2~" f12

#krew setup
export PATH="${PATH}:${HOME}/.krew/bin"

# add short git alises
# ref: https://gist.github.com/mwhite/6887990
# function_exists() {
    # declare -f -F $1 > /dev/null
    # return $?
# }
#
# for al in `git --list-cmds=alias`; do
    # alias g$al="git $al"
#
    # complete_func=_git_$(git --list-cmds=alias $al)
    # function_exists $complete_fnc && __git_complete g$al $complete_func
# done
#
#
#


function get-millis(){
  date +%s000
}


if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
##### WHAT YOU WANT TO DISABLE FOR WARP - BELOW

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

##### WHAT YOU WANT TO DISABLE FOR WARP - ABOVE
fi

###-begin-cdk-completions-###
_cdk_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" cdk --get-yargs-completions "${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _cdk_yargs_completions cdk
###-end-cdk-completions-###
# if [[ ($TERM_PROGRAM != "vscode") && ($TERM_PROGRAM != "WarpTerminal") && (-z $TMUX) ]]; then
#   # zellij attach --index "0" --create
#   eval "$(zellij setup --generate-auto-start zsh)"
# fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
