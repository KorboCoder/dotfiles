# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Amazon Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"


if [[ -n "${ZELLIJ}" ]]; then
export TMUX=$ZELLIJ
fi

if [[ -n "${ZELLIJ}" ]]; then
  unset TMUX
fi


# check if we did a :term command in neovim
is_nvim_term() {
    parent_process=$(ps -o comm= -p $PPID)
    if [[ $parent_process == *"nvim"* ]]; then
        return 0  # Return success (true)
    else
        return 1  # Return failure (false)
    fi
}
# setup term before loading tmux
# for undercurls
export TERM="xterm-256color"
[[ -n $TMUX ]] && export TERM="tmux-256color"
# update_terminfo () {
#     local x ncdir terms
#     ncdir="/opt/homebrew/opt/ncurses"
#     [[-n $NCURSES_PATH]] && ncdir=$NCURSES_PATH
#     # terms=(alacritty-direct alacritty tmux tmux-256color)
#     terms=(tmux tmux-256color)
#
#     mkdir -p ~/.terminfo && cd ~/.terminfo
#
#     if [ -d $ncdir ] ; then
#         echo "ncurses detected"
#         # sed : fix color for htop
#         for x in $terms ; do
#             $ncdir/bin/infocmp -x -A $ncdir/share/terminfo $x > ${x}.src &&
#             sed -i '' 's|pairs#0x10000|pairs#32767|' ${x}.src &&
#             /usr/bin/tic -x ${x}.src &&
#             rm -f ${x}.src
#         done
#     else
#         local url
#         url="https://invisible-island.net/datafiles/current/terminfo.src.gz"
#         if curl -sfLO $url ; then
#             gunzip -f terminfo.src.gz &&
#             sed -i '' 's|pairs#0x10000|pairs#32767|' terminfo.src &&
#             /usr/bin/tic -xe ${(j:,:)terms} terminfo.src &&
#             rm -f terminfo.src
#         else
#             echo "unable to download $url"
#         fi
#     fi
#     cd - > /dev/null
# }
# Always work in a tmux session if tmux is installed
# https://github.com/chrishunt/dot-files/blob/master/.zshrc
# https://gist.github.com/chakrit/5004006
if which tmux 2>&1 >/dev/null; then
    if [ $TERM != "tmux-256color" ] && [ $TERM != "tmux" ]; then
        # if we're not in :term and toggleterm, create a main session
        if [ ! $is_nvim_term ] && [ -z "$TOGGLETERM_ID" ] ; then 
            export TERM="tmux-256color"
            tmux new-session -A -t main || tmux new-session -s main
            exit
            # else create a session using the set TOGGLETERM_ID, usually we use the cwd of the project as the id
        fi
    else

        if [ -n "$TOGGLETERM_ID" ] && [ "$TOGGLETERM_ID" != "no-session" ]; then
            tmux new-session -A -t $TOGGLETERM_ID || tmux new-session -s $TOGGLETERM_ID
            exit
        fi 
    fi
fi
#NVM setup  
# CLI stuff I've installed
# bat
# btop
# dust
# exa
# fd
# fzf
# jq
# ncdu
# neoftech
# nvm
# prettyping
# ranger
# tokei
# w3m
# jqp
# duf
# xh
# dog
# fd
# ripgrep
# lazygit
# lazydocker
# git checkout with fzf: https://medium.com/@mrWinston/smarter-git-checkout-using-fzf-to-supercharge-your-commandline-7507db600996
# delta

# source .nix.zshrc
if [ -f "$HOME/.nix.zsh" ]; then
    source "$HOME/.nix.zsh"
fi

gcha() {
  git checkout "$(git branch --all | fzf | tr -d '[:space:]')"
}
gch() {
  git checkout "$(git branch | fzf | tr -d '[:space:]')"
}

# vi mode
# bindkey -v
# export KEYTIMEOUT=1

# gcloud setup
source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"

HISTSIZE=10000
HISTFILESIZE=20000
eval "$(mcfly init zsh)"
eval $(thefuck --alias pota)
# fix jupyter PATH issue with monterey
export JUPYTER_PATH=/opt/homebrew/share/jupyter:$JUPYTER_PATH



# zsh autocomplete
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=8,underline"
zshautocomplete_path=$HOMEBBREW_PREFIX/share/zsh-autocomplete/zsh-autocomplete.plugin.zsh
if [ -d autocomplete_path ]; then # check if we have fzf-tab tab repo dir
    source zshautocomplete_path
fi

# zsh autosuggestion
zshautosuggestion_path=$HOMEBBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh
if [ -d zshautosuggestion_path ]; then # check if we have fzf-tab tab repo dir
    source zshautosuggestion_path
fi

# fzf-tab
if [ -d "$HOME/fzf-tab" ]; then # check if we have fzf-tab tab repo dir
    autoload -U compinit; compinit
    source $HOME/fzf-tab/fzf-tab.plugin.zsh
    # eza style
    zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
fi

# Fix starship load wrapping issue
export LC_ALL=en_US.UTF-8

# zsh-you-should-use settings: https://github.com/MichaelAquilina/zsh-you-should-use
export YSU_MESSAGE_POSITION="after"

export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
 # [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# set java jdk to homebrew installation
export JAVA_HOME=/opt/homebrew/opt/openjdk/

# starship steup
if command -v starship &> /dev/null && false; then
    eval "$(starship init zsh)"
fi

# colors
export CLICOLOR=1

# compdef init
autoload -Uz compinit
compinit

test -f ~/.work-zshrc && source ~/.work-zshrc # 2> /dev/null

# setup kubectl
if command -v kubectl &> /dev/null; then
    # kubectl aliases
    alias k="kubectl"
    alias kctx="kubectl ctx"
    alias kns="kubectl ns"
    # Load the kubectl completion code for zsh[1] into the current shell
    source <(kubectl completion zsh)
    # Set the kubectl completion code for zsh[1] to autoload on startup
    # kubectl completion zsh > "${fpath[1]}/_kubectl"
fi

if command -v exa &> /dev/null; then
    # detailas ls
    alias ll="exa -lah"
    alias ls="exa"
fi

if command -v eza &> /dev/null; then
    # detailas ls
    alias ll="eza -lah"
    alias ls="eza"
fi

# pretty ping
alias pping="prettyping --nolegend"

# lazygit
export XDG_CONFIG_HOME="$HOME/.config"
alias gg="lazygit"

#nvimdiff
alias nvimdiff="nvim -d"

# edit this .zshrc file
alias zshconfig="nvim ~/.zshrc"

# open ~/.config/nvimo
alias nconfig="(cd ~/.config/nvim; nvim)"

# configure tmux
alias tmuxconfig="nvim ~/.tmux.conf"

# reload this zshfile
alias zshreload="source ~/.zshrc"

# fzf setup
alias fhistory="history | fzf"
alias preview="fzf --preview 'bat --color \"always\" {}'"
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort' \
--color=spinner:#f4dbd6,hl:#ed8796 \
--color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6 \
--color=marker:#f4dbd6,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796"
# --color=bg+:#363a4f,bg:#24273a \

alias standups="nvim ~/standups.md"

# set ctype locale to C
export LC_CTYPE="C"

function jsonbat (){
  cat $1 |  json_pp | bat -l json; 
}

# function f12 {
#     print -n "\e[[24"
#
# }
# zle -N f12
# fix to iterm nav hotkeys
bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word
# bindkey "^[[24;2~" f12

#krew setup
export PATH="${PATH}:${HOME}/.krew/bin"

# add short git alises
# ref: https://gist.github.com/mwhite/6887990
# function_exists() {
    # declare -f -F $1 > /dev/null
    # return $?
# }
#
# for al in `git --list-cmds=alias`; do
    # alias g$al="git $al"
#
    # complete_func=_git_$(git --list-cmds=alias $al)
    # function_exists $complete_fnc && __git_complete g$al $complete_func
# done
#
#
#


function get-millis(){
  date +%s000
}


if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
##### WHAT YOU WANT TO DISABLE FOR WARP - BELOW

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

##### WHAT YOU WANT TO DISABLE FOR WARP - ABOVE
fi

###-begin-cdk-completions-###
_cdk_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" cdk --get-yargs-completions "${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _cdk_yargs_completions cdk
###-end-cdk-completions-###
# if [[ ($TERM_PROGRAM != "vscode") && ($TERM_PROGRAM != "WarpTerminal") && (-z $TMUX) ]]; then
#   # zellij attach --index "0" --create
#   eval "$(zellij setup --generate-auto-start zsh)"
# fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


#custom choose foreground job
function fg_fzf (){
	# List jobs with their status and command, select one with fzf, then foreground it
	job_list=$(jobs -l)
	if [ -z "$job_list" ]; then
		echo "No jobs found."
		return 1;
	fi

	# Count the number of jobs
	job_count=$(echo "$job_list" | wc -l)

	if [ "$job_count" -eq 1 ]; then
		# Automatically select the single job
		job_id=$(echo "$job_list" | awk '{print $1}' | sed 's/\]//g' | sed 's/\[//g')
	else

	  # Use fzf to select a job if there are multiple jobs
	  selected_job=$(echo "$job_list" | fzf)
	  if [ -n "$selected_job" ]; then
		  job_id=$(echo "$selected_job" | awk '{print $1}' | sed 's/\]//g' | sed 's/\[//g')
	  else
		  echo "No job selected."
		  return 1;
	  fi
	fi

	# Bring the selected job to the foreground
	fg "%$job_id"
}
alias zf="fg_fzf"

#add cargo
if [ -f "$HOME/.cargo/env" ]; then
    source "$HOME/.cargo/env"
    ~/.cargo/bin
fi

# check if ~/.cargo/bin exist
if [ -d "$HOME/.cargo/bin" ]; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# init zoxide if it exists
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
fi


if command -v goenv &> /dev/null; then
    # golang
    export GOENV_ROOT="$HOME/.goenv"
    export PATH="$GOENV_ROOT/bin:$PATH"
    eval "$(goenv init -)"
    export PATH="$GOROOT/bin:$PATH"
    export PATH="$PATH:$GOPATH/bin"
    export GOBIN="$GOENV_ROOT/bin"
fi

# setup visaul and editor
if command -v nvim &> /dev/null; then
    export EDITOR=nvim
fi

if command -v bat &> /dev/null; then
    export VISUAL=nvim
fi

# setup atuin
if command -v atuin &> /dev/null; then
	eval "$(atuin init zsh)"
fi

if [ -f "$HOMEBBREW_PREFIX/.cargo/env" ]; then
    . $HOMEBREW_PREFIX/opt/asdf/libexec/asdf.sh
fi

# check if powerlevel is installed in homebrew
powerlevel10k_path=$HOMEBREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme
if [ -f  $powerlevel10k_path ]; then
    source $powerlevel10k_path
fi

# Amazon Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

